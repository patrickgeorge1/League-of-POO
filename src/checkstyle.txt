Starting audit...
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:4:8: Unused import - constants.PyromancerModifiers. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:12:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:12:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:12:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:12:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:26:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:27:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:27:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:27:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:28:26: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:28:31: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:29:34: '3' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:30: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:30:61: '6' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:31: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:40:25: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:40:30: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:41: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:49:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:50:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:50:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:50:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:51:26: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:51:31: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:52:34: '3' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:53: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:53:61: '6' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:54: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:63:25: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:63:30: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:64: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:72:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:73:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:73:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:73:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:74:26: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:74:31: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:75:34: '3' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:76: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:76:61: '6' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:77: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:86:25: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:86:30: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:87: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:95:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:96:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:96:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:96:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:97:26: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:97:31: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:98:34: '3' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:99: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:99:61: '6' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:100: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:109:25: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:109:30: '10' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:110: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:118:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:119:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:119:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Paralysis.java:119:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:8:8: Unused import - java.util.ArrayList. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:11:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:11:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:11:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:11:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:24:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:25:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:25:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:25:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:26:26: '350' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:26:32: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:27: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:31:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:32:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:32:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:32:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:33:26: '350' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:33:32: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:34: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:38:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:39:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:39:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:39:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:40:26: '350' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:40:32: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:41: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:45:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:46:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:46:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:46:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:47:26: '350' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:47:32: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:48: Line is longer than 100 characters (found 115). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:52:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:53:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:53:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Fireblast.java:53:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:11:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:11:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:11:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:11:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:24:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:25:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:25:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:25:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:26:26: '150' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:26:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:27: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:30:25: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:30:30: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:31: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:33: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:36:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:37:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:37:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:37:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:38:26: '150' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:38:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:39: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:42:25: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:42:30: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:43: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:45: Line is longer than 100 characters (found 117). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:48:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:49:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:49:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:49:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:50:26: '150' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:50:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:51: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:54:25: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:54:30: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:55: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:57: Line is longer than 100 characters (found 117). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:60:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:61:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:61:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:61:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:62:26: '150' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:62:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:63: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:66:25: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:66:30: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:67: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:69: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:72:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:73:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:73:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ignite.java:73:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:5:8: Unused import - constants.PyromancerModifiers. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:10:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:10:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:10:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:10:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:23:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:24:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:24:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:24:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:25:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:25:32: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:26:23: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:27: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:27:23: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:27:37: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:30:68: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:34: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:38:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:39:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:39:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:39:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:40:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:40:32: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:41:23: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:42: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:42:23: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:42:37: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:45:68: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:49: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:53:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:54:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:54:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:54:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:55:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:55:32: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:56:23: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:57: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:57:23: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:57:37: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:60:68: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:64: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:68:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:69:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:69:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:69:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:70:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:70:32: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:71:23: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:72: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:72:23: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:72:37: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:75:68: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:79: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:83:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:84:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:84:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Execute.java:84:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:11:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:11:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:11:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:11:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:24:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:25:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:25:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:25:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:26:29: '35' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:27: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:27:27: '70' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:27:45: '70' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:28:37: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:35: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:35:66: ',' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:35:68: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:39:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:40:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:40:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:40:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:45:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:46:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:46:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:46:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:47:29: '35' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:48: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:48:27: '70' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:48:45: '70' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:49:37: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:56: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:56:66: ',' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:56:68: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:60:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:61:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:61:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:61:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:62:29: '35' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:63: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:63:27: '70' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:63:45: '70' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:64:37: '100.0f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:71: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:71:66: ',' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:71:68: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:75:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:76:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:76:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Deflect.java:76:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:4:8: Unused import - constants.PyromancerModifiers. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:10:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:10:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:10:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:10:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:23:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:24:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:24:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:24:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:25:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:25:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:26: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:26:64: '1.5f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:27: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:31:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:32:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:32:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:32:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:33:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:33:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:34: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:34:64: '1.5f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:35: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:39:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:40:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:40:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:40:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:41:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:41:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:42: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:42:64: '1.5f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:43: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:47:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:48:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:48:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:48:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:49:26: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:49:32: '20' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:50: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:50:64: '1.5f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:51: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:55:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:56:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:56:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Backstab.java:56:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:5:8: Unused import - constants.PyromancerModifiers. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:12:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:12:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:12:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:12:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:25:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:26:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:26:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:26:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:27:26: '100' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:27:32: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:28: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:35:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:36:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:36:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:36:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:37:26: '100' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:37:32: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:38: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:45:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:46:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:46:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:46:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:47:26: '100' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:47:32: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:48: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:55:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:56:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:56:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:56:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:57:26: '100' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:57:32: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:58: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:65:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:66:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:66:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Slam.java:66:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:4:8: Unused import - constants.PyromancerModifiers. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:10:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'getLandMofifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'getLandMofifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:10:34: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:10:35: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:10:48: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:23:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:24:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:24:38: Parameter rogue should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:24:51: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:25:25: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:25:32: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:30:41: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:35:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:36:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:36:38: Parameter knight should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:36:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:37:25: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:37:32: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:42:41: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:47:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:48:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:48:38: Parameter wizard should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:48:53: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:49:25: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:49:32: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:54:41: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:59:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'between' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'between' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:60:25: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:60:38: Parameter pyromancer should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:60:61: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:61:25: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:61:32: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:66:41: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:71:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'cast' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'cast' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:72:22: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:72:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Drain.java:72:53: Parameter me should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:7:8: Unused import - java.util.ArrayList. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:10:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:11:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:12:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:13:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/patrick/Desktop/lopoo/src/abilities/Ability.java:14:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:9:19: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:15:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'resetHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'resetHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:17:20: '900' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:17:26: '80' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:20:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'maxHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'maxHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:22:16: '900' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:22:22: '80' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:25:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:26:23: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:26:39: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:33:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:33:24: Parameter ability should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:33:41: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:37:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Knight.java:39: Line is longer than 100 characters (found 187). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:9:19: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:15:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'resetHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'resetHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:17:20: '400' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:17:26: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:20:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'maxHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'maxHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:22:16: '400' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:22:22: '30' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:25:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:26:23: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:26:39: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:33:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:33:24: Parameter ability should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:33:41: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:37:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Wizard.java:39: Line is longer than 100 characters (found 187). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:10:18: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:17:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'increseCritCycle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'increseCritCycle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:21:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'critNow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'critNow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:21:28: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:22:29: '3' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:25:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'resetHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'resetHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:27:20: '600' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:27:26: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:30:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'maxHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'maxHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:32:16: '600' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:32:22: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:35:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:36:23: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:36:39: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:43:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getCritCycle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getCritCycle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:47:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'setCritCycle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'setCritCycle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:47:30: Parameter critCycle should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:51:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:51:24: Parameter ability should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:51:41: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:55:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Rogue.java:57: Line is longer than 100 characters (found 187). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:9:23: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:15:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'resetHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'resetHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:17:20: '500' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:17:26: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:20:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'maxHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'maxHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:22:16: '500' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:22:22: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:25:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:26:23: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:26:39: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:33:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:33:24: Parameter ability should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:33:41: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:37:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Pyromancer.java:39: Line is longer than 100 characters (found 187). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:23:21: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:28:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:29:13: Name 'curr_xp' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:31:20: '250' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:32:41: '50' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:39:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getXpFrom' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getXpFrom' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:39:26: '(' is preceded with whitespace. [MethodParamPad]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:39:27: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:39:36: 'enemy' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:40:13: Name 'level_winner' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:41:13: Name 'level_loser' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:42:38: '200' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:42:75: '40' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:46:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'rot' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'rot' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:47: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:47:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:49:17: Name 'nr_of_rounds' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:50:17: 'damage' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:55: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:57: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:62:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'whereShouldHeMove' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'whereShouldHeMove' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:62:50: Parameter direction should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:65:13: Name 'x_old' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:67:13: Name 'y_old' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:90:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getTerrain' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getTerrain' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:90:28: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:94:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'deleteMeFromMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'deleteMeFromMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:94:33: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:100:14: 'public' modifier out of order with the JLS suggestions. [ModifierOrder]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:101:14: 'public' modifier out of order with the JLS suggestions. [ModifierOrder]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:103:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:107:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:107:23: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:111:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:115:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:115:23: Parameter xp should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:119:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:123:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:123:23: Parameter hp should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:127:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getNegativeNegativeBuff' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getNegativeNegativeBuff' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:131:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setNegativeBuff' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setNegativeBuff' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:131:33: Parameter negativeBuff should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:135:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:139:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:139:27: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:143:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'addDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'addDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:143:27: Parameter damage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:143:34: 'damage' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:143:42: '{' at column 42 should have line break after. [LeftCurly]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:145:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'clearDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'clearDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:145:31: '{' at column 31 should have line break after. [LeftCurly]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:147:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'summAllTheDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'summAllTheDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:149:21: 'damage' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:155:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'decreaseIncapacity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'decreaseIncapacity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:157:17: Name 'number_of_incapacity' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:160: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:164:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getPosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getPosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:168:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setPosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setPosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:168:29: Parameter position should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:172:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getEnemy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getEnemy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:176:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setEnemy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setEnemy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:176:26: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:180:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getPriorityToAttck' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getPriorityToAttck' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:184:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'getIncapacity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'getIncapacity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:188:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setIncapacity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setIncapacity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:188:31: Parameter incapacity should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:192:5: Class 'Champion' looks like designed for extension (can be subclassed), but the method 'setPriorityToAttck' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Champion' final or making the method 'setPriorityToAttck' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:192:36: Parameter priorityToAttck should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:196:14: 'public' modifier out of order with the JLS suggestions. [ModifierOrder]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:197:14: 'public' modifier out of order with the JLS suggestions. [ModifierOrder]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:197:41: 'enemy' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/champions/Champion.java:199:14: 'public' modifier out of order with the JLS suggestions. [ModifierOrder]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:4:31: Name 'backstab_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:5:31: Name 'backstab_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:6:31: Name 'backstab_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:7:31: Name 'backstab_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:9:31: Name 'paralysis_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:10:31: Name 'paralysis_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:11:31: Name 'paralysis_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:12:31: Name 'paralysis_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:14:31: Name 'land' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:15:31: Name 'volcanic' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:16:31: Name 'desert' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/RogueModifiers.java:17:31: Name 'woods' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:4:31: Name 'execute_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:5:31: Name 'execute_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:6:31: Name 'execute_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:7:31: Name 'execute_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:9:31: Name 'slam_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:10:31: Name 'slam_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:11:31: Name 'slam_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:12:31: Name 'slam_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:14:31: Name 'land' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:15:31: Name 'volcanic' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:16:31: Name 'desert' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/KnightModifiers.java:17:31: Name 'woods' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:4:31: Name 'fireblast_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:5:31: Name 'fireblast_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:6:31: Name 'fireblast_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:7:31: Name 'fireblast_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:9:31: Name 'ignite_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:10:31: Name 'ignite_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:11:31: Name 'ignite_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:12:31: Name 'ignite_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:14:31: Name 'land' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:15:31: Name 'volcanic' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:16:31: Name 'desert' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/PyromancerModifiers.java:17:31: Name 'woods' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:4:31: Name 'drain_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:5:31: Name 'drain_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:6:31: Name 'drain_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:7:31: Name 'drain_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:9:31: Name 'deflect_rogue' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:10:31: Name 'deflect_knight' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:11:31: Name 'deflect_pyromancer' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:12:31: Name 'deflect_wizard' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:14:31: Name 'land' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:15:31: Name 'volcanic' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:16:31: Name 'desert' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/constants/WizardModifiers.java:17:31: Name 'woods' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:3: Using the '.*' form of import should be avoided - champions.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:6:8: Unused import - javax.print.attribute.standard.NumberUp. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:7: Using the '.*' form of import should be avoided - javax.swing.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:10: Class ChampFactory should be declared as final. [FinalClass]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:14:29: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:14:29: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:18:9: '{' at column 9 should be on the previous line. [LeftCurly]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:25:32: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:25:40: Parameter type should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:25:51: Parameter position should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:49:34: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:53:40: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:53:48: '{' at column 48 should have line break after. [LeftCurly]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:58:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/factories/ChampFactory.java:71:40: Parameter dictOfChamps should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:7: Using the '.*' form of import should be avoided - java.io.*. [AvoidStarImport]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18: Line is longer than 100 characters (found 166). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:17: Parameter roundNumber should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:34: Parameter playerNumber should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:52: Parameter numLines should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:66: Parameter numColumns should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:83: Parameter terrain should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:110: Parameter players should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:18:137: Parameter movements should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:26:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'playRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'playRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:26:27: Parameter movement should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:45:15: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:65:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'combat2Champs' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'combat2Champs' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:65:31: Parameter player should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:65:48: Parameter enemy should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:68: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:69: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:88:17: Name 'enemy_old_level' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:90: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:98:17: Name 'player_old_level' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:100: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:111:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'play' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'play' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:111:22: Parameter path should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:111:35: Parameter pathToPrint should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:111:73: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:112:13: 'roundNumber' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:123:13: '}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:125: Line is longer than 100 characters (found 233). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:126: Line is longer than 100 characters (found 229). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:139:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getRoundNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getRoundNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:143:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setRoundNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setRoundNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:143:32: Parameter roundNumber should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:147:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getPlayerNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getPlayerNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:151:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setPlayerNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setPlayerNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:151:33: Parameter playerNumber should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:155:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'getWorld' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'getWorld' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:159:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'setWorld' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'setWorld' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:159:26: Parameter world should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/Game.java:163:5: Class 'Game' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Game' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/game/GameInputLoader.java:14:28: Parameter pathIN should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/GameInputLoader.java:14:43: Parameter pathOUT should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/GameInputLoader.java:54: Line is longer than 100 characters (found 125). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/game/GameInputLoader.java:67:27: Parameter pathIN should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/game/GameInputLoader.java:75:28: Parameter pathOUT should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/main/Main.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/patrick/Desktop/lopoo/src/main/Main.java:3:8: Unused import - champions.Champion. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/main/Main.java:4:8: Unused import - factories.ChampFactory. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/main/Main.java:9:8: Unused import - java.util.HashMap. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/main/Main.java:11:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/patrick/Desktop/lopoo/src/main/Main.java:13:29: Parameter args should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:17:16: Parameter numLines should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:17:30: Parameter numColumns should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:21: 'for' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:21:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:24: 'for' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:24:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:25: 'for' construct must use '{}'s. [NeedBraces]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:25:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:30:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'constructMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'constructMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:30:30: Parameter lines should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:30:55: Parameter players should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:43:18: Name 'PlayerType' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:54:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'move' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'move' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:54:22: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:54:30: Parameter coord should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:74:25: Name 'EnemyId' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:80:26: Name 'new_positon' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:87:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'removeChampionFromMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'removeChampionFromMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:87:39: Parameter id should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:94:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getTerrain' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getTerrain' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:94:28: Parameter x should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:94:35: Parameter y should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:98:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:102:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'setMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'setMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:102:24: Parameter map should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:106:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getNumLines' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getNumLines' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:110:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'setNumLines' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'setNumLines' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:110:29: Parameter numLines should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:114:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getNumColumns' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getNumColumns' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:118:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'setNumColumns' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'setNumColumns' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:118:31: Parameter numColumns should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:122:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:125:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/map/Map.java:126:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:3:8: Unused import - champions.Champion. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:14:20: Parameter type should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:19:5: Class 'MapCell' looks like designed for extension (can be subclassed), but the method 'getPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MapCell' final or making the method 'getPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:23:5: Class 'MapCell' looks like designed for extension (can be subclassed), but the method 'setPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MapCell' final or making the method 'setPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:23:28: Parameter players should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:27:5: Class 'MapCell' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MapCell' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:31:5: Class 'MapCell' looks like designed for extension (can be subclassed), but the method 'setType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MapCell' final or making the method 'setType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:31:25: Parameter type should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:35:5: Class 'MapCell' looks like designed for extension (can be subclassed), but the method 'addPlayer' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MapCell' final or making the method 'addPlayer' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:35:27: Parameter champ should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/map/MapCell.java:39:5: Class 'MapCell' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MapCell' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:7:21: Parameter x should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:7:28: Parameter y should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:12:5: Class 'Position' looks like designed for extension (can be subclassed), but the method 'updatePosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Position' final or making the method 'updatePosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:12:32: Parameter x should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:12:36: 'x' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:12:39: Parameter y should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:12:43: 'y' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:17:5: Class 'Position' looks like designed for extension (can be subclassed), but the method 'getX' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Position' final or making the method 'getX' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:21:5: Class 'Position' looks like designed for extension (can be subclassed), but the method 'setX' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Position' final or making the method 'setX' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:21:22: Parameter x should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:25:5: Class 'Position' looks like designed for extension (can be subclassed), but the method 'getY' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Position' final or making the method 'getY' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:29:5: Class 'Position' looks like designed for extension (can be subclassed), but the method 'setY' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Position' final or making the method 'setY' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Position.java:29:22: Parameter y should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:7:21: Parameter first should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:7:32: Parameter second should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:12:5: Class 'TupleInt' looks like designed for extension (can be subclassed), but the method 'getFirst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TupleInt' final or making the method 'getFirst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:16:5: Class 'TupleInt' looks like designed for extension (can be subclassed), but the method 'setFirst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TupleInt' final or making the method 'setFirst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:16:26: Parameter first should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:20:5: Class 'TupleInt' looks like designed for extension (can be subclassed), but the method 'getSecond' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TupleInt' final or making the method 'getSecond' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:24:5: Class 'TupleInt' looks like designed for extension (can be subclassed), but the method 'setSecond' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TupleInt' final or making the method 'setSecond' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/TupleInt.java:24:27: Parameter second should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:3:8: Unused import - champions.Champion. [UnusedImports]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:9:19: Name 'land_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:10:19: Name 'race_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:13:30: Name 'extra_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:15:19: Parameter baseDamage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:15:35: Parameter land_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:15:41: Name 'land_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:15:56: Parameter race_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:15:62: Name 'race_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:22:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageWithLandModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageWithLandModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:28:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageWithRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageWithRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:33:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageWithBothModifiers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageWithBothModifiers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:38:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageWithBothModifiersUpgraded' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageWithBothModifiersUpgraded' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:43:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageWithBothModifiersAndCrit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageWithBothModifiersAndCrit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48: Line is longer than 100 characters (found 117). [LineLength]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageForDrain' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageForDrain' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:34: Parameter procent should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:49: Parameter race_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:55: 'race_modifier' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:55: Name 'race_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:70: Parameter land_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:76: 'land_modifier' hides a field. [HiddenField]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:76: Name 'land_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:91: Parameter currentHp should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:48:106: Parameter maxHp should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:50:44: '0.3f' is a magic number. [MagicNumber]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:57:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageJustWithLand' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageJustWithLand' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:61:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'setDamageJustWithLand' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'setDamageJustWithLand' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:61:39: Parameter damageJustWithLand should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:64:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:68:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'setBaseDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'setBaseDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:68:31: Parameter baseDamage should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:72:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getLand_modifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getLand_modifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:72:18: Name 'getLand_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:76:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'setLand_modifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'setLand_modifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:76:17: Name 'setLand_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:76:34: Parameter land_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:76:40: Name 'land_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:80:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getRace_modifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getRace_modifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:80:18: Name 'getRace_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:84:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'setRace_modifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'setRace_modifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:84:17: Name 'setRace_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:84:34: Parameter race_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:84:40: Name 'race_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:88:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getExtra_modifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getExtra_modifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:88:29: Name 'getExtra_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:92:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'getDamageWithBonuses' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'getDamageWithBonuses' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:96:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'setDamageWithBonuses' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'setDamageWithBonuses' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:96:38: Parameter damageWithBonuses should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:100:5: Class 'Damage' looks like designed for extension (can be subclassed), but the method 'setExtra_modifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Damage' final or making the method 'setExtra_modifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:100:17: Name 'setExtra_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:100:35: Parameter extra_modifier should be final. [FinalParameters]
[ERROR] /home/patrick/Desktop/lopoo/src/utils/Damage.java:100:52: Name 'extra_modifier' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
Audit done.
Checkstyle ends with 764 errors.
